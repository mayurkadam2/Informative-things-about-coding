-----------------------------------------
//array initialization

int[] arr = new int[5];    = > not int[] arr;

------------------------------------------
// switch case syntax

switch(expression){

    case 'char':   =>  not case('char)
        break;
}

------------------------------------------
//important thing to know

s.charAt(i) → Java’s official way
not s[i]

------------------------------------------
//To know about string in java

String is not primitive in Java.
String is a class in java;
immutable => can not changed once created

-------------------------------------------
//Things to know

Java is always pass-by-value.
For primitives: value itself is copied.
For objects: reference is copied (so changes to object are seen).
For Strings: reference is copied, but object is immutable, so original never changes.

--------------------------------------------
//Objects in java

Object variable → stores a reference (address) to the object.
when we create a object it holds a address for that object.
Car car1 = new Car();
Car car2 = car1;
    //Here, we don’t create a new Car.
    //We just copy the address (the “key”) from car1 into car2.

Now both car1 and car2 point to the same Car object in memory.

   car1 ───────┐
               │   
               ▼
         [ Car object in memory ]
               ▲
               │
   car2 ───────┘


it means we are creating a object in the memory and the car1 is just store the address of the object so we can reach to the object. there is no name for the object
If no variable points to the object anymore → it becomes unreachable, and Java’s Garbage Collector will clean it up.
Every objects have its
Fields(State) => variables objects
Methods(behaviour) => methos
each object is like a package of data + behavior.

--------------------------------------------
//Class Inside a class

We can Create class inside a class.
but we can not access the properties of that class out of the scope.

--------------------------------------------
//Package

It is like a folder but for Java classes
-> group for related classes
-> helps to organize code
Built-in packages → Already given by Java, like:
java.util (contains tools like ArrayList, Scanner)
java.io (for input/output, like files)
java.sql (for database work)
User-defined packages → Made by you, when you want to organize your own code.

--------------------------------------------
//getterMethod & setterMethod

we use getter methods to get the values of the private fields of the class
we use setter methods to set the values of the 
private fields of the class
getters/setters do give access — but with control.
student.age = -10;
That doesn’t make sense — a student can’t have age -10.
So we make it:
private int age;

then ╗
        ▼
public void setAge(int age) {
    if (age > 0) {
        this.age = age;
    } else {
        System.out.println("Invalid age");
    }
}

it will reject non important data
The setter will reject it.

                    |
                    |
                   \|/
                    v

This is called encapsulation → wrapping data + rules together.


---------------------------------------------
//this keyword
 when we pass the atribute to the method of a class an if the name of that method mathches with the field variable the dumb pc gets confused.to avoid this confustion to tell the dumb pc that the this is our var and the other with the same name came from user.
..))
this is a reference variable in Java that always points to the current object of the class.

this keyword does not limit himself here there are many uses of this keyword
Calling another constructor in the same class:
Passing the current object to another method:
Returning the current object (useful in method chaining):


----------------------------------------------





























